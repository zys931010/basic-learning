router应用
    1. npm i @vue-router@4
    2. 创建页面组件
    3. 创建router实例
    4. main.js引入router
    5. App.vue 
          router-link组件进行导航
          router-view组件进行渲染

router模式切换和懒加载
    模式切换
        创建router实例时history的模式切换
          Hash：使用URL的hash值来作为路由，用来指导浏览器的动作的，对服务端完全无用，支持所有浏览器，URL带有#
          History：以来HTML5 API和服务器配置，URL没有有#
          Abstract：支持所有js运行模式。如果发现没有浏览器的API，路由会自动强制进入这个模式

    懒加载
      创建router实例时routes里component的两种表现形式
        打包之后会打在一个文件里
        import Home from '../views/Home.vue'
        component: Home,
        打包之后，会打成多个包，运行时会按需加载，即为懒加载
        component: ()=>import('../views/Home.vue'),

自定义router-link和使用命名试图：具体查看App_copy1.vue,router->index_copy1.js页面
    $router 全局的路由器
    $route  页面的本地路

嵌套路由(子路由): 具体查看router->index.js页面
    router-link router-view 

动态路由和参数传递: 具体查看UserView.vue、MyPage.vue、MyArticle.vue、index_copy2.js页面
    传递参数主要有两种类型：params和query
    params的类型：
      配置路由格式：/user/:id（动态路由）
      传递的方式：在path后面对应的值:to = " '/user/'+uid "
      传递后形成的路径：/user/9,/user/zs
      接受参数：$route.params.id
    query的类型
      配置路由格式：/user,正常配置
      传递的方式：对象中使用query的key作为传递方式:to={path:'/',query:{id:1,name:'adc'}} 
      传递后形成的路径：/user?id=9,/user?id=zs
      接受参数：$route.query.name

重定项和别名: 具体查看index_copy3.js页面
    重定项：
      重定向也在routes配置中完成，要重定向/a到/b
      const routes = [{path:'/home',redirect:'/'}]
      const routes = [{path:'/home',redirect:{name: homepage}}]
      path: '/search/:searchText',
        redirect: to => {
          return {path: '/search',query: {q:to.params.searchText}}
        }
    别名
      别名/as/home表示用户访问时/home,URL保持不变/home，但将被匹配，就像用户正在访问时一样/。
      const routes = [{path:'/',component：Homepage,alias:'/home'}]
      alias: ['people','list]
      alias:['/:id','']

导航守卫:  具体查看index_copy3.js页面
   主要用来通过跳转或者取消的方式守卫导航
   // to: Route即将要进入的目标路由对象，from：Route当前导航正要离开的路由
   前置守卫
   router.beforeEach((to,form,next)=>{
    //...return false
   })

   后置钩子
   router.afterEach((to,from,next)=>{
    //...return false
   })

   有很多机会植入路由导航过程中：全局，单个路由独享的，或者组件级的
      全局导航守卫
      路由独享的守卫
      组件内的守卫

keep-alive和vue-router结合
    keep-alive是vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染
      include: 正则表达式 白名单
      exclude: 正则表达式 黑名单
    router-view是vue-router内置组件，如果直接包含在keep-alive里面，所有路径匹配到的组件都会被缓存
      <router-view v-slot="{ Component }">
        <transition>
         <keep-alive exclude="About">
            <component :is="Component" />
         </keep-alive>
        </transition>
      </router-view>