父元素（网格容器）
	display: grid/inline-grid;  设置网格容器

	grid-template-columns: 20px 30px; 定义网格布局中的列数，并可定义每列的宽度
	grid-template-rows: 20px 30px; 定义网格布局中的行数，并可定义每列的高度

	grid-row-gap: 50px;  设置行之间的间隙,行隙为50px
	grid-column-gap: 100px; 设置列之间的间隙,行隙为100px
	grid-gap: 50px 100px;  grid-row-gap和grid-column-gap间隙简写

	justify-content:  用于水平对齐容器内的整个网格
          stretch  使内容占满整个网格的宽度
          space-evently  会在列之间以及列周围留出相等的空间
          space-around  会在列周围留出相等的空间
          space-between  会在列之间留出相等的空间
          center  会在容器中间对齐网格
          start 会在容器开头对齐网格
          end  会在容器末端对齐网格
	align-content:  用于垂直对齐容器内的整个网格
          stretch  使内容占满整个网格的高度
          space-evenly 将使行之间以及行周围具有相等的空间
          space-around 将使行周围具有相等的空间
          space-between 将使行之间具有相等的空间
          center 会对齐容器中间的行
          start 会对齐容器开头的行
          end 会对齐容器末端的行

  justify-items:  设置网格中所有的网格项沿水平方向对齐
          stretch 使内容占满整个单元格的宽度
          start 使内容在单元格左侧对齐
          center 使内容在单元格居中对齐
          end 使内容在单元格右侧对齐
  align-items: 设置网格中所有的网格项沿垂直方向对齐
          stretch 使内容占满整个单元格的高度
          start 使内容在单元格上侧对齐
          center 使内容在单元格居中对齐
          end 使内容在单元格下侧对齐

	grid-template-areas: 定义引用命名的网格项目，句号.表示没有名称的网格项目
          'myArea myArea myArea'
          'myArea myArea . . .' 
          'myArea myArea . . .';

子元素（网格项目）
  用关键字 "span" 来定义该项目将跨越多少列
	行线（把网格项目放在行线 1，并在行线 3 结束它）
	grid-row-start: 1;
	grid-row-end: 3;
	grid-row: 1/ span 2;
	列线(把网格项目放在列线 1，并在列线 3 结束它)
	grid-column-start: 1;
  grid-column-end: 3;
	grid-column: 1/ span 2; 定义将项目放置在哪一列上

  行线、列线简写
	grid-area: grid-row-start grid-column-start grid-row-end grid-column-end;
  也可以用于为网格项目分配名称
	grid-area: 可以通过网格容器的 grid-template-areas 属性来引用命名的网格项目
          myArea;
  也可以将项目放置在我们喜欢的任意位置,item1放在了第一行第三列
  .item1 { grid-area: 1 / 3 / 2 / 4; }

  justify-self 其内容的位置在单元格内沿水平轴的对齐方式
          stretch 使内容占满整个单元格的宽度
          start 使内容在单元格左侧对齐
          center 使内容在单元格居中对齐
          end 使内容在单元格右侧对齐
  align-self 其内容的位置在单元格内沿垂直轴的对齐方式
          stretch 使内容占满整个单元格的宽度
          start 使内容在单元格上侧对齐
          center 使内容在单元格居中对齐
          end 使内容在单元格下侧对齐

网格单位来更改列和行的大小
   px: 绝对单位
   em: 相对对单位
   fr: 设置列或行占剩余空间的比例
   auto: 设置列宽或行高自动等于它的内容的宽度或高度
   %：将列或行调整为它的容器宽度或高度的百分比
   grid-template-columns: auto 50px 10% 2fr 1fr;
   ---第一列的宽与它的内容宽度相等；第二列宽 50px；第三列宽是它容器的 10%；最后两列，将剩余的宽度平均分成三份，第四列占两份，第五列占一份

repeat() 指定行或列的重复次数，后面加上逗号以及需要重复的值
    grid-template-columns: repeat(2, 1fr 50px) 20px;
     ==>grid-template-columns: 1fr 50px 1fr 50px 20px;

    repeat(auto-fill, minmax(60px, 1fr));
     ==>auto-fill:自动填充的功能,根据容器的大小，尽可能多地放入指定大小的行或列
    repeat(auto-fit, minmax(60px, 1fr));
     ==>auto-fit:与auto-fill相似，
     ==>auto-fill与auto-fit的区别：当容器的大小大于各网格项之和时，auto-fill 会持续地在一端放入空行或空列，这样就会使所有网格项挤到另一边；而 auto-fit 则不会在一端放入空行或空列，而是会将所有网格项拉伸至合适的大小

minmax() 作用是在网格容器改变大小时限制网格项的大小
    grid-template-columns: 100px minmax(50px, 200px);
    ===>第一列宽度为 100px，第二列宽度最小值是 50px，最大值是 200px
    grid-template-columns: repeat(3, minmax(90px,1fr)); 可以与 repeat()一起使用

媒体查询创建响应式布局
     @media (min-width: 300px){ =>网页可视区域的宽大于等于300px时,执行下面样式代码
      .container{
        grid-template-columns: auto 1fr;
        grid-template-rows: auto 1fr auto;
        grid-template-areas:
          "advert header"
          "advert content"
          "advert footer";
      }
    }